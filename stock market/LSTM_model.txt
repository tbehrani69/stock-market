import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from datetime import datetime, timedelta

# Fetch historical stock data
def fetch_stock_data(symbol, start_date, end_date):
stock = yf.Ticker(symbol)
df = stock.history(start=start_date, end=end_date)
return df[['Open', 'High', 'Low', 'Close', 'Volume']]

# Build and train an LSTM model for stock price prediction
def create_lstm_model(data, time_steps, future_days):

# Normalize the data to a range between 0 and 1
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Prepare the data for LSTM with the given time steps
X, y = [], []
for i in range(time_steps, len(scaled_data) - future_days + 1):
X.append(scaled_data[i - time_steps:i
y.append(scaled_data[i:i + future_days, 3])

# Convert to numpy arrays for model training
X, y = np.array(X), np.array(y)
n_features = X.shape[2]

# Define the LSTM model structure
model = Sequential([
LSTM(50, return_sequences=True, input_shape=(time_steps, n_features)),
LSTM(50, return_sequences=False),
Dense(future_days)
])
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(X, y, epochs=50, batch_size=32, validation_split=0.1, verbose=1)
return model, scaler

# Predict future prices using the trained LSTM model
def predict_future_prices(model, scaler, last_sequence, future_days):
last_sequence_scaled = scaler.transform(last_sequence) # Scale the last sequence of input data
predicted_scaled = model.predict(np.array([last_sequence_scaled])) # Predict future prices
# Reverse the scaling to get actual price values
predicted = scaler.inverse_transform(np.column_stack((predicted_scaled[0], np.zeros((future_days, 4)))))
return predicted[:, 0]
# Return only the 'Close' price predictions

# Prepare data for the selected stock and generate future price predictions
def prepare_stock_data(symbol):
end_date = datetime.now()
start_date = end_date - timedelta(days=365*5) # Use 5 years of historical data
data = fetch_stock_data(symbol, start_date, end_date)
time_steps = 60 # Days of past data used to predict the future
future_days = 15 # Predict prices for the next 15 days

# Train the model and get the scaler
model, scaler = create_lstm_model(data, time_steps, future_days)

# Prepare the last 'time_steps' days of data for prediction
last_sequence = data.iloc[-time_steps:].values
future_prices = predict_future_prices(model, scaler, last_sequence, future_days)

# Generate future dates and create a DataFrame with predictions
future_dates = pd.date_range(start=end_date, periods=future_days)
future_df = pd.DataFrame({'Date': future_dates, 'Predicted_Close': future_prices})
return data, future_df

# Main execution
if __name__ == "__main__":
symbol = "AAPL" # Example stock symbol
historical_data, future_data = prepare_stock_data(symbol) # Fetch and predict
print(f"Historical data shape: {historical_data.shape}")
print(f"Future data shape: {future_data.shape}")